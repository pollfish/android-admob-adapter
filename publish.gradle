apply plugin: 'maven-publish'
apply plugin: 'signing'

File secretPropsFile = project.rootProject.file('local.properties')
Properties p = new Properties()
new FileInputStream(secretPropsFile).withCloseable { is ->
    p.load(is)
}
p.each { name, value ->
    ext[name] = value
}

task prepareGoogleCloudDistDirs {
    mkdir "$buildDir/tmp/dist/Prodege Android AdMob Adapter-${rootProject.adapterVersionName}"
}

task packageGoogleCloudDistribution(type: Zip) {
    archiveFileName = "Prodege Android AdMob Adapter-${rootProject.adapterVersionName}.zip"
    destinationDirectory = file("$buildDir/dist/public")

    from "$buildDir/tmp/dist/"
}

task copyDistToTempDirectory(type: Copy) {
    from "$buildDir/outputs/aar/prodege-admob-${rootProject.adapterVersionName}.aar"
    into "$buildDir/tmp/dist/Prodege Android AdMob Adapter-${rootProject.adapterVersionName}"
}

task deleteDistTempDirectories(type: Delete) {
    delete "$buildDir/tmp/dist"
}

task packageDistributions {
    dependsOn 'prepareGoogleCloudDistDirs'
    dependsOn 'copyDistToTempDirectory'
    dependsOn 'packageGoogleCloudDistribution'
    dependsOn 'deleteDistTempDirectories'

    tasks.findByName('copyDistToTempDirectory').mustRunAfter 'prepareGoogleCloudDistDirs'
    tasks.findByName('packageGoogleCloudDistribution').mustRunAfter 'copyDistToTempDirectory'
    tasks.findByName('deleteDistTempDirectories').mustRunAfter 'packageGoogleCloudDistribution'
}

publishing {
    publications {

        release(MavenPublication) {

            groupId "com.prodege.mediation"
            artifactId "prodege-admob"
            version rootProject.adapterVersionName

            def filename = "prodege-admob-${rootProject.adapterVersionName}"

            artifact("$buildDir/outputs/aar/${filename}.aar")

            pom {
                name = "prodege-admob"
                description = "Adapter for showing Prodege Ads within mobile apps through AdMob mediation"
                url = "https://github.com/pollfish/android-admob-adapter"
                packaging = "aar"

                licenses {
                    license {
                        name = "The Apache Software License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }

                developers {
                    developer {
                        id = "prodege"
                        name = "Prodege, LLC"
                        email = "support@pollfish.com"
                    }
                }

                scm {
                    connection = "https://github.com/pollfish/android-admob-adapter.git"
                    developerConnection = "https://github.com/pollfish/android-admob-adapter.git"
                    url = "https://github.com/pollfish/android-admob-adapter"
                }

                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        if (it.artifacts.size() > 0) {
                            dependencyNode.appendNode('type', it.artifacts[0].type)
                        }
                    }

                }
            }
        }
    }

    repositories {
        maven {
            name = "sonatype"
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

signing {
    sign publishing.publications
}

nexusStaging {
    packageGroup "com.prodege.mediation"
    stagingProfileId = nexusStagingProfileId
    username = ossrhUsername
    password = ossrhPassword
}